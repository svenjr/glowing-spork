// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package internal

import (
	"context"
	"database/sql"
	"time"

	"github.com/segmentio/ksuid"
)

const createConnection = `-- name: CreateConnection :one
INSERT INTO "apollo"."connections" (
  requester_id,
  approver_id
) VALUES (
  $1, $2
)
RETURNING id, requester_id, approver_id, created_at
`

type CreateConnectionParams struct {
	RequesterID ksuid.KSUID
	ApproverID  ksuid.KSUID
}

func (q *Queries) CreateConnection(ctx context.Context, arg CreateConnectionParams) (ApolloConnection, error) {
	row := q.db.QueryRow(ctx, createConnection, arg.RequesterID, arg.ApproverID)
	var i ApolloConnection
	err := row.Scan(
		&i.ID,
		&i.RequesterID,
		&i.ApproverID,
		&i.CreatedAt,
	)
	return i, err
}

const createRequest = `-- name: CreateRequest :one
INSERT INTO "apollo"."requests" (
  requester_id,
  approver_id
) VALUES (
  $1, $2
)
RETURNING id, requester_id, approver_id, created_at, updated_at
`

type CreateRequestParams struct {
	RequesterID ksuid.KSUID
	ApproverID  ksuid.KSUID
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (ApolloRequest, error) {
	row := q.db.QueryRow(ctx, createRequest, arg.RequesterID, arg.ApproverID)
	var i ApolloRequest
	err := row.Scan(
		&i.ID,
		&i.RequesterID,
		&i.ApproverID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "apollo"."users" (
  first_name,
  last_name,
  phone,
  phone_country,
  dob,
  organ_donor,
  medical_info
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING ksuid, first_name, last_name, phone, phone_country, dob, organ_donor, medical_info, created_at, updated_at
`

type CreateUserParams struct {
	FirstName    string
	LastName     string
	Phone        int64
	PhoneCountry int32
	Dob          time.Time
	OrganDonor   sql.NullBool
	MedicalInfo  sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (ApolloUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.PhoneCountry,
		arg.Dob,
		arg.OrganDonor,
		arg.MedicalInfo,
	)
	var i ApolloUser
	err := row.Scan(
		&i.Ksuid,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.PhoneCountry,
		&i.Dob,
		&i.OrganDonor,
		&i.MedicalInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteConnection = `-- name: DeleteConnection :one
DELETE FROM "apollo"."connections"
WHERE approver_id = $1
OR requester_id = $1 RETURNING id
`

func (q *Queries) DeleteConnection(ctx context.Context, approverID ksuid.KSUID) (int64, error) {
	row := q.db.QueryRow(ctx, deleteConnection, approverID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteRequest = `-- name: DeleteRequest :one
DELETE FROM "apollo"."requests"
WHERE approver_id = $1 RETURNING id
`

func (q *Queries) DeleteRequest(ctx context.Context, approverID ksuid.KSUID) (int64, error) {
	row := q.db.QueryRow(ctx, deleteRequest, approverID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :one

DELETE FROM "apollo"."users"
WHERE ksuid = $1 RETURNING ksuid
`

// -- name: CreateRequestLog :one
// INSERT INTO request_history (
//   request_id,
//   requester_id,
//   approver_id,
//   decision
// ) VALUES (
//   $1, $2, $3, $4
// )
func (q *Queries) DeleteUser(ctx context.Context, ksuid ksuid.KSUID) (ksuid.KSUID, error) {
	row := q.db.QueryRow(ctx, deleteUser, ksuid)
	var ksuid ksuid.KSUID
	err := row.Scan(&ksuid)
	return ksuid, err
}

const getUser = `-- name: GetUser :one
SELECT ksuid, first_name, last_name, phone, phone_country, dob, organ_donor, medical_info, created_at, updated_at FROM "apollo"."users"
WHERE ksuid = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, ksuid ksuid.KSUID) (ApolloUser, error) {
	row := q.db.QueryRow(ctx, getUser, ksuid)
	var i ApolloUser
	err := row.Scan(
		&i.Ksuid,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.PhoneCountry,
		&i.Dob,
		&i.OrganDonor,
		&i.MedicalInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listConnections = `-- name: ListConnections :many
SELECT id, requester_id, approver_id, created_at FROM "apollo"."connections"
WHERE requester_id OR approver_id = $1
`

func (q *Queries) ListConnections(ctx context.Context, approverID ksuid.KSUID) ([]ApolloConnection, error) {
	rows, err := q.db.Query(ctx, listConnections, approverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApolloConnection
	for rows.Next() {
		var i ApolloConnection
		if err := rows.Scan(
			&i.ID,
			&i.RequesterID,
			&i.ApproverID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRequestsIn = `-- name: ListRequestsIn :many
SELECT id, requester_id, approver_id, created_at, updated_at FROM "apollo"."requests"
WHERE approver_id = $1
ORDER BY created_at
`

func (q *Queries) ListRequestsIn(ctx context.Context, approverID ksuid.KSUID) ([]ApolloRequest, error) {
	rows, err := q.db.Query(ctx, listRequestsIn, approverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApolloRequest
	for rows.Next() {
		var i ApolloRequest
		if err := rows.Scan(
			&i.ID,
			&i.RequesterID,
			&i.ApproverID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRequestsOut = `-- name: ListRequestsOut :many
SELECT id, requester_id, approver_id, created_at, updated_at FROM "apollo"."requests"
WHERE requester_id = $1
ORDER BY created_at
`

func (q *Queries) ListRequestsOut(ctx context.Context, requesterID ksuid.KSUID) ([]ApolloRequest, error) {
	rows, err := q.db.Query(ctx, listRequestsOut, requesterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApolloRequest
	for rows.Next() {
		var i ApolloRequest
		if err := rows.Scan(
			&i.ID,
			&i.RequesterID,
			&i.ApproverID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
