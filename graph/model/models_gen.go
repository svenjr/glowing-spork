// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Represents a connection between two users. A connection only exists when the approving user approves a request from a requesting user
type Connection struct {
	ID        string `json:"id"`
	Requester *User  `json:"requester"`
	Approver  *User  `json:"approver"`
	CreatedAt string `json:"createdAt"`
}

// Represents a request made by a user which has not been approved yet. A request will not exists if it has been addressed - either denied or accepted.
type ConnectionRequest struct {
	ID        string `json:"id"`
	Requester *User  `json:"requester"`
	Approver  *User  `json:"approver"`
	CreatedAt string `json:"createdAt"`
}

// A new request for a user to be added to another user's network.
type NewRequest struct {
	RequesterID string `json:"requesterID"`
	ApproverID  string `json:"approverID"`
}

// A new user to add to the database
type NewUser struct {
	FirstName   string  `json:"firstName"`
	LastName    string  `json:"lastName"`
	PhoneNumber string  `json:"phoneNumber"`
	DateOfBirth string  `json:"dateOfBirth"`
	OrganDonor  *bool   `json:"organDonor"`
	MedicalInfo *string `json:"medicalInfo"`
}

// A User in the database
type User struct {
	ID          string  `json:"id"`
	FirstName   string  `json:"firstName"`
	LastName    string  `json:"lastName"`
	PhoneNumber string  `json:"phoneNumber"`
	DateOfBirth string  `json:"dateOfBirth"`
	OrganDonor  *bool   `json:"organDonor"`
	MedicalInfo *string `json:"medicalInfo"`
	CreatedAt   string  `json:"createdAt"`
	UpdatedAt   string  `json:"updatedAt"`
}

type ConnectionDecision struct {
	ConnectionRequestID string                  `json:"connectionRequestID"`
	ConnectionDecision  *ConnectionDecisionEnum `json:"connectionDecision"`
}

// ConnectionDecisionEnum is an enum to encapsulate the options a user has when responding to a request
type ConnectionDecisionEnum string

const (
	ConnectionDecisionEnumApprove ConnectionDecisionEnum = "APPROVE"
	ConnectionDecisionEnumDeny    ConnectionDecisionEnum = "DENY"
	ConnectionDecisionEnumIgnore  ConnectionDecisionEnum = "IGNORE"
)

var AllConnectionDecisionEnum = []ConnectionDecisionEnum{
	ConnectionDecisionEnumApprove,
	ConnectionDecisionEnumDeny,
	ConnectionDecisionEnumIgnore,
}

func (e ConnectionDecisionEnum) IsValid() bool {
	switch e {
	case ConnectionDecisionEnumApprove, ConnectionDecisionEnumDeny, ConnectionDecisionEnumIgnore:
		return true
	}
	return false
}

func (e ConnectionDecisionEnum) String() string {
	return string(e)
}

func (e *ConnectionDecisionEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConnectionDecisionEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConnectionDecisionEnum", str)
	}
	return nil
}

func (e ConnectionDecisionEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
